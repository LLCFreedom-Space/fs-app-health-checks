name: docc

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Declare the jobs map, and start with the build job.
jobs:
  build:
    # Because the script relies on xcrun and Xcode, you‚Äôll need a macOS runner. When using DocC as a Swift package plugin, you can use a Linux machine instead.
    runs-on: ubuntu-latest
    # One or more steps make up a job. Declare the list of steps, and start by checking out the repository taking only the last commit. Therefore, the fetch-depth option is set to 0.
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # After checking out the repository, run the build-docc.sh script.
      - name: Run Build Docs
        run: swift package --allow-writing-to-directory ./docs generate-documentation --target HealthChecks --output-path ./docs --transform-for-static-hosting --hosting-base-path HealthChecks
  # Define the deploy job.
  deploy:
    # Because Xcode isn‚Äôt necessary anymore, you can choose a Linux runner.
    runs-on: ubuntu-latest
    # The previous job, build, created and uploaded the artifacts. So, add a dependency on that job, meaning that this one will only run when the first has finished.
    needs: build
    # Declare a single step for this job based on the official actions/deploy-pages Action. Set the environment variables it requires.
    steps:
      - name: Deploy to GitHub Pages
        run: swift package --disable-sandbox preview-documentation --target HealthChecks
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
